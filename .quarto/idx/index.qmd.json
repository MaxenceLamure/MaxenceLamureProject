{"title":"Prévisions Météo","markdown":{"yaml":{"title":"Prévisions Météo"},"headingText":"URL de l'API","containsRefs":false,"markdown":"\n\n```{python}\n\"\"\"\nAPI\n\"\"\"\nimport pandas as pd\nimport requests\n\nurl = \"https://api.open-meteo.com/v1/meteofrance?latitude=43.6109&longitude=3.8763&daily=weathercode,temperature_2m_max,temperature_2m_min,precipitation_sum,windspeed_10m_max,winddirection_10m_dominant&timezone=Europe%2FBerlin\"\n\n# Envoi de la requête GET à l'API\nresponse = requests.get(url)\n\n# Vérification du statut de la requête\nif response.status_code == 200:\n    # Conversion des données JSON en un dictionnaire Python\n    data = response.json()\n    # Accéder aux données météo à partir de la réponse JSON\n    jour = data[\"daily\"][\"time\"]\n    wmo = data[\"daily\"][\"weathercode\"]\n    temperature_max = data[\"daily\"][\"temperature_2m_max\"]\n    temperature_min = data[\"daily\"][\"temperature_2m_min\"]\n    vent = data[\"daily\"][\"windspeed_10m_max\"]\n    direction_vent = data[\"daily\"][\"winddirection_10m_dominant\"]\n    precipitations = data[\"daily\"][\"precipitation_sum\"]\n    # Valeurs arrondies à l'unité\n    temperature_max_maj = [round(temp) for temp in temperature_max]\n    temperature_min_min = [round(temp) for temp in temperature_min]\n    vent_arr = [round(temp) for temp in vent]\nelse:\n    # Affichage d'un message d'erreur si la requête échoue\n    print(\"Erreur lors de la récupération des données météorologiques.\")\n```\n\n```{python}\n\"\"\"\nDates\n\"\"\"\nfrom datetime import datetime\nimport locale\n\n# Définir la locale en français\nlocale.setlocale(locale.LC_TIME, 'fr_FR.UTF-8')\n\n# Liste de dates\ndates = ['2023-11-01', '2023-11-02', '2023-11-03', '2023-11-04']\n\n# Fonction pour formater les dates\ndef formater_date(date):\n    # Convertir la chaîne de date en objet datetime\n    date_obj = datetime.strptime(date, '%Y-%m-%d')\n    # Formater l'abréviation du jour en minuscules et sans point à la fin\n    nom_jour_abrege = date_obj.strftime('%a').lower().rstrip('.')\n    # Mettre en majuscule la première lettre de l'abréviation du jour\n    nom_jour_abrege = nom_jour_abrege.capitalize()\n    # Formater la date en \"jour/mois\"\n    jour_mois = date_obj.strftime('%d/%m')\n    return nom_jour_abrege, jour_mois\n\n# Utiliser la fonction pour formater les dates dans la liste\nnoms_jours, dates_formatees = zip(*[formater_date(date) for date in dates])\n```\n\n```{python}\n\"\"\"\nIcônes WMO\n\"\"\"\nimport json\n\n# Charger le fichier JSON dans un dictionnaire\nwith open('images.json', 'r') as json_file:\n    data = json.load(json_file)\n\n# La variable wmo contient les numéros WMO\nwmo = [3, 51, 3, 51]\n\n# Créer un dictionnaire de correspondance entre les numéros WMO et les noms et URL du fichier JSON\ncorrespondance_wmo = {str(key): value for key, value in data.items()}\n\n# Récupérer les URLs et les noms à partir des numéros WMO\nnoms_urls = []\nfor numero in wmo:\n    if str(numero) in correspondance_wmo:\n        info = correspondance_wmo[str(numero)]\n        nom = info['nom']\n        url = info['url']\n        noms_urls.append({'nom': nom, 'url': url})\n    else:\n        noms_urls.append({'nom': '', 'url': ''})  # Valeurs par défaut si le numéro WMO n'est pas trouvé\n\n```\n\n```{python}\n\"\"\"\nCouleurs températures\n\"\"\"\nimport matplotlib.colors as mcolors\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Définir les températures minimale et maximale\nmin_temp = -15\nmax_temp = 70\n\n# Créer une échelle de couleurs basée sur les températures\ncmap = plt.cm.YlOrBr\nnorm = mcolors.Normalize(vmin=min_temp, vmax=max_temp)\nscalarmap = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nscalarmap.set_array([])  # Permet de normaliser les valeurs\n\n# Fonction pour convertir la température en couleur hexadécimale\ndef temperature_to_color(temperature):\n    color = scalarmap.to_rgba(temperature)\n    return mcolors.to_hex(color, keep_alpha=False)\n```\n\n```{python}\n\"\"\"\nTableau\n\"\"\"\nfrom IPython.display import display, HTML\n\nhtml_code = f\"\"\"\n<head>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n\n<table id=\"myTable\">\n    <tr class=\"couleur1\">\n        <th title=\"Date\" class=\"bordure2 bordure top\"><strong>{noms_jours[0]}</strong><br>Aujourd'hui</th>\n        <th title=\"Date\"><strong>{noms_jours[1]}</strong><br>Demain</th>\n        <th title=\"Date\"><strong>{noms_jours[2]}</strong><br>{dates_formatees[2]}</th>\n        <th title=\"Date\"><strong>{noms_jours[3]}</strong><br>{dates_formatees[3]}</th>\n    </tr>\n\n    <tr class=\"couleur2\">\n        <th title=\"Icône WMO\" class=\"bordure2 bordure\"><img src =\"{noms_urls[0]['url']}\"></a><br>\n        {noms_urls[0]['nom']}</th>\n        <th title=\"Icône WMO\"><img src =\"{noms_urls[1]['url']}\"></a><br>\n        {noms_urls[1]['nom']}</th>\n        <th title=\"Icône WMO\"><img src =\"{noms_urls[2]['url']}\"></a><br>\n        {noms_urls[2]['nom']}</th>\n        <th title=\"Icône WMO\"><img src =\"{noms_urls[3]['url']}\"></a><br>\n        {noms_urls[3]['nom']}</th>\n    </tr>\n\n    <tr class=\"couleur1\">\n        <th title=\"Température maximale\" class=\"bordure2 bordure\"><div class=\"mini-case\" style=\"background-color: {temperature_to_color(temperature_max_maj[0])};\">{temperature_max_maj[0]} °C</div></th>\n        <th title=\"Température maximale\"><div class=\"mini-case\" style=\"background-color: {temperature_to_color(temperature_max_maj[1])};\">{temperature_max_maj[1]} °C</div></th>\n        <th title=\"Température maximale\"><div class=\"mini-case\" style=\"background-color: {temperature_to_color(temperature_max_maj[2])};\">{temperature_max_maj[2]} °C</div></th>\n        <th title=\"Température maximale\"><div class=\"mini-case\" style=\"background-color: {temperature_to_color(temperature_max_maj[3])};\">{temperature_max_maj[3]} °C</div></th>\n    </tr>\n\n    <tr class=\"couleur1\">\n        <th title=\"Température minimale\" class=\"bordure2 bordure\"><div class=\"mini-case\" style=\"background-color: {temperature_to_color(temperature_min_min[0])};\">{temperature_min_min[0]} °C</div></th>\n        <th title=\"Température minimale\"><div class=\"mini-case\" style=\"background-color: {temperature_to_color(temperature_min_min[1])};\">{temperature_min_min[1]} °C</div></th>\n        <th title=\"Température minimale\"><div class=\"mini-case\" style=\"background-color: {temperature_to_color(temperature_min_min[2])};\">{temperature_min_min[2]} °C</div></th>\n        <th title=\"Température minimale\"><div class=\"mini-case\" style=\"background-color: {temperature_to_color(temperature_min_min[3])};\">{temperature_min_min[3]} °C</div></th>\n    </tr>\n\n    <tr class=\"couleur1\">\n        <th title=\"Vitesse du vent maximale\" class=\"bordure2 bordure\">{vent_arr[0]} km/h</th>\n        <th title=\"Vitesse du vent maximale\">{vent_arr[1]} km/h</th>\n        <th title=\"Vitesse du vent maximale\">{vent_arr[2]} km/h</th>\n        <th title=\"Vitesse du vent maximale\">{vent_arr[3]} km/h</th>\n    </tr>\n    \n    <tr class=\"couleur1\">\n        <th title=\"Quantité de précipitations\" class=\"bordure2 bordure bottom\">{precipitations[0]} mm</th>\n        <th title=\"Quantité de précipitations\">{precipitations[1]} mm</th>\n        <th title=\"Quantité de précipitations\">{precipitations[2]} mm</th>\n        <th title=\"Quantité de précipitations\">{precipitations[3]} mm</th>\n    </tr>\n</table>\n\"\"\"\n\ndisplay(HTML(html_code))\n```\n\n\n","srcMarkdownNoYaml":"\n\n```{python}\n\"\"\"\nAPI\n\"\"\"\nimport pandas as pd\nimport requests\n\n# URL de l'API\nurl = \"https://api.open-meteo.com/v1/meteofrance?latitude=43.6109&longitude=3.8763&daily=weathercode,temperature_2m_max,temperature_2m_min,precipitation_sum,windspeed_10m_max,winddirection_10m_dominant&timezone=Europe%2FBerlin\"\n\n# Envoi de la requête GET à l'API\nresponse = requests.get(url)\n\n# Vérification du statut de la requête\nif response.status_code == 200:\n    # Conversion des données JSON en un dictionnaire Python\n    data = response.json()\n    # Accéder aux données météo à partir de la réponse JSON\n    jour = data[\"daily\"][\"time\"]\n    wmo = data[\"daily\"][\"weathercode\"]\n    temperature_max = data[\"daily\"][\"temperature_2m_max\"]\n    temperature_min = data[\"daily\"][\"temperature_2m_min\"]\n    vent = data[\"daily\"][\"windspeed_10m_max\"]\n    direction_vent = data[\"daily\"][\"winddirection_10m_dominant\"]\n    precipitations = data[\"daily\"][\"precipitation_sum\"]\n    # Valeurs arrondies à l'unité\n    temperature_max_maj = [round(temp) for temp in temperature_max]\n    temperature_min_min = [round(temp) for temp in temperature_min]\n    vent_arr = [round(temp) for temp in vent]\nelse:\n    # Affichage d'un message d'erreur si la requête échoue\n    print(\"Erreur lors de la récupération des données météorologiques.\")\n```\n\n```{python}\n\"\"\"\nDates\n\"\"\"\nfrom datetime import datetime\nimport locale\n\n# Définir la locale en français\nlocale.setlocale(locale.LC_TIME, 'fr_FR.UTF-8')\n\n# Liste de dates\ndates = ['2023-11-01', '2023-11-02', '2023-11-03', '2023-11-04']\n\n# Fonction pour formater les dates\ndef formater_date(date):\n    # Convertir la chaîne de date en objet datetime\n    date_obj = datetime.strptime(date, '%Y-%m-%d')\n    # Formater l'abréviation du jour en minuscules et sans point à la fin\n    nom_jour_abrege = date_obj.strftime('%a').lower().rstrip('.')\n    # Mettre en majuscule la première lettre de l'abréviation du jour\n    nom_jour_abrege = nom_jour_abrege.capitalize()\n    # Formater la date en \"jour/mois\"\n    jour_mois = date_obj.strftime('%d/%m')\n    return nom_jour_abrege, jour_mois\n\n# Utiliser la fonction pour formater les dates dans la liste\nnoms_jours, dates_formatees = zip(*[formater_date(date) for date in dates])\n```\n\n```{python}\n\"\"\"\nIcônes WMO\n\"\"\"\nimport json\n\n# Charger le fichier JSON dans un dictionnaire\nwith open('images.json', 'r') as json_file:\n    data = json.load(json_file)\n\n# La variable wmo contient les numéros WMO\nwmo = [3, 51, 3, 51]\n\n# Créer un dictionnaire de correspondance entre les numéros WMO et les noms et URL du fichier JSON\ncorrespondance_wmo = {str(key): value for key, value in data.items()}\n\n# Récupérer les URLs et les noms à partir des numéros WMO\nnoms_urls = []\nfor numero in wmo:\n    if str(numero) in correspondance_wmo:\n        info = correspondance_wmo[str(numero)]\n        nom = info['nom']\n        url = info['url']\n        noms_urls.append({'nom': nom, 'url': url})\n    else:\n        noms_urls.append({'nom': '', 'url': ''})  # Valeurs par défaut si le numéro WMO n'est pas trouvé\n\n```\n\n```{python}\n\"\"\"\nCouleurs températures\n\"\"\"\nimport matplotlib.colors as mcolors\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Définir les températures minimale et maximale\nmin_temp = -15\nmax_temp = 70\n\n# Créer une échelle de couleurs basée sur les températures\ncmap = plt.cm.YlOrBr\nnorm = mcolors.Normalize(vmin=min_temp, vmax=max_temp)\nscalarmap = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nscalarmap.set_array([])  # Permet de normaliser les valeurs\n\n# Fonction pour convertir la température en couleur hexadécimale\ndef temperature_to_color(temperature):\n    color = scalarmap.to_rgba(temperature)\n    return mcolors.to_hex(color, keep_alpha=False)\n```\n\n```{python}\n\"\"\"\nTableau\n\"\"\"\nfrom IPython.display import display, HTML\n\nhtml_code = f\"\"\"\n<head>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n\n<table id=\"myTable\">\n    <tr class=\"couleur1\">\n        <th title=\"Date\" class=\"bordure2 bordure top\"><strong>{noms_jours[0]}</strong><br>Aujourd'hui</th>\n        <th title=\"Date\"><strong>{noms_jours[1]}</strong><br>Demain</th>\n        <th title=\"Date\"><strong>{noms_jours[2]}</strong><br>{dates_formatees[2]}</th>\n        <th title=\"Date\"><strong>{noms_jours[3]}</strong><br>{dates_formatees[3]}</th>\n    </tr>\n\n    <tr class=\"couleur2\">\n        <th title=\"Icône WMO\" class=\"bordure2 bordure\"><img src =\"{noms_urls[0]['url']}\"></a><br>\n        {noms_urls[0]['nom']}</th>\n        <th title=\"Icône WMO\"><img src =\"{noms_urls[1]['url']}\"></a><br>\n        {noms_urls[1]['nom']}</th>\n        <th title=\"Icône WMO\"><img src =\"{noms_urls[2]['url']}\"></a><br>\n        {noms_urls[2]['nom']}</th>\n        <th title=\"Icône WMO\"><img src =\"{noms_urls[3]['url']}\"></a><br>\n        {noms_urls[3]['nom']}</th>\n    </tr>\n\n    <tr class=\"couleur1\">\n        <th title=\"Température maximale\" class=\"bordure2 bordure\"><div class=\"mini-case\" style=\"background-color: {temperature_to_color(temperature_max_maj[0])};\">{temperature_max_maj[0]} °C</div></th>\n        <th title=\"Température maximale\"><div class=\"mini-case\" style=\"background-color: {temperature_to_color(temperature_max_maj[1])};\">{temperature_max_maj[1]} °C</div></th>\n        <th title=\"Température maximale\"><div class=\"mini-case\" style=\"background-color: {temperature_to_color(temperature_max_maj[2])};\">{temperature_max_maj[2]} °C</div></th>\n        <th title=\"Température maximale\"><div class=\"mini-case\" style=\"background-color: {temperature_to_color(temperature_max_maj[3])};\">{temperature_max_maj[3]} °C</div></th>\n    </tr>\n\n    <tr class=\"couleur1\">\n        <th title=\"Température minimale\" class=\"bordure2 bordure\"><div class=\"mini-case\" style=\"background-color: {temperature_to_color(temperature_min_min[0])};\">{temperature_min_min[0]} °C</div></th>\n        <th title=\"Température minimale\"><div class=\"mini-case\" style=\"background-color: {temperature_to_color(temperature_min_min[1])};\">{temperature_min_min[1]} °C</div></th>\n        <th title=\"Température minimale\"><div class=\"mini-case\" style=\"background-color: {temperature_to_color(temperature_min_min[2])};\">{temperature_min_min[2]} °C</div></th>\n        <th title=\"Température minimale\"><div class=\"mini-case\" style=\"background-color: {temperature_to_color(temperature_min_min[3])};\">{temperature_min_min[3]} °C</div></th>\n    </tr>\n\n    <tr class=\"couleur1\">\n        <th title=\"Vitesse du vent maximale\" class=\"bordure2 bordure\">{vent_arr[0]} km/h</th>\n        <th title=\"Vitesse du vent maximale\">{vent_arr[1]} km/h</th>\n        <th title=\"Vitesse du vent maximale\">{vent_arr[2]} km/h</th>\n        <th title=\"Vitesse du vent maximale\">{vent_arr[3]} km/h</th>\n    </tr>\n    \n    <tr class=\"couleur1\">\n        <th title=\"Quantité de précipitations\" class=\"bordure2 bordure bottom\">{precipitations[0]} mm</th>\n        <th title=\"Quantité de précipitations\">{precipitations[1]} mm</th>\n        <th title=\"Quantité de précipitations\">{precipitations[2]} mm</th>\n        <th title=\"Quantité de précipitations\">{precipitations[3]} mm</th>\n    </tr>\n</table>\n\"\"\"\n\ndisplay(HTML(html_code))\n```\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":false,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","jupyter":"python3","theme":"cosmo","title":"Prévisions Météo"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}