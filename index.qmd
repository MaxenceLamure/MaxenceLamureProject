---
title: "Météo Montpellier"
subtitle: "Occitanie, France, 43.61°N 3.88°E, 55m s.n.m."
---

```{python}
"""
API
"""
from IPython.display import display, HTML
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors
import json
from datetime import datetime, timedelta
import pandas as pd
import requests
from collections import Counter

# Obtenir la date actuelle
date_actuelle = datetime.now()

# Obtenir la date du cinquième jour
jours = 4
date_jours = date_actuelle + timedelta(days=jours)

# Formater les dates au format requis pour l'URL
format_date = "%Y-%m-%d"
date_i = date_actuelle.strftime(format_date)
date_j = date_jours.strftime(format_date)

# Construire l'URL de l'API "daily" selon la date (intervalle de 5 jours) à Montpellier
latitude = 43.6109
longitude = 3.8763

url = f"https://api.open-meteo.com/v1/meteofrance?latitude={latitude}&longitude={longitude}&daily=weather_code,temperature_2m_max,temperature_2m_min,precipitation_sum,wind_direction_10m_dominant&timezone=Europe%2FBerlin&start_date={date_i}&end_date={date_j}"

# URL de l'API "hourly" qui servira à calculer la vitesse moyenne du vent et afficher la bonne icône WMO de nuit
url_h = f"https://api.open-meteo.com/v1/meteofrance?latitude={latitude}&longitude={longitude}&hourly=weather_code,wind_speed_10m&timezone=Europe%2FBerlin&start_date={date_i}&end_date={date_j}"

# Envoi de la requête GET aux APIs
response = requests.get(url)
response_h = requests.get(url_h)

# Vérification du statut de la requête "daily"
if response.status_code == 200:
    # Conversion des données JSON en un dictionnaire Python
    data = response.json()

    # Accéder aux données météo à partir de la réponse JSON
    jour = data["daily"]["time"]
    wmo = data["daily"]["weather_code"]
    temperature_max = data["daily"]["temperature_2m_max"]
    temperature_min = data["daily"]["temperature_2m_min"]
    direction_vent = data["daily"]["wind_direction_10m_dominant"]
    precipitations = data["daily"]["precipitation_sum"]

    # Prendre les valeurs entières et remplacer les valeurs manquantes par "-" pour les températures
    temperature_max_ent = [round(temp) if not pd.isna(
        temp) else "-" for temp in temperature_max]
    temperature_min_ent = [round(temp) if not pd.isna(
        temp) else "-" for temp in temperature_min]

    # Remplacer les valeurs manquantes par "-" pour les autres variables
    jour = [date if not pd.isna(date) else "-" for date in jour]
    wmo = [code if not pd.isna(code) else "-" for code in wmo]
    direction_vent = [direction if not pd.isna(
        direction) else "-" for direction in direction_vent]
    precipitations = [precipitation if not pd.isna(
        precipitation) else "-" for precipitation in precipitations]

    # Prendre la moyenne des températures
    moyenne = []
    for i in range(jours+1):
        moyenne.append((temperature_max_ent[i]+temperature_min_ent[i])/2)
else:
    # Affichage d'un message d'erreur si la requête échoue
    print("Erreur lors de la récupération des données météorologiques.")


# Vérification du statut de la requête "hourly"
if response_h.status_code == 200:
    # Conversion des données JSON en un dictionnaire Python
    data_h = response_h.json()

    # Accéder aux données météo à partir de la réponse JSON
    vent_h = data_h["hourly"]["wind_speed_10m"]
    wmo_h = data_h["hourly"]["weather_code"]
else:
    # Affichage d'un message d'erreur si la requête échoue
    print("Erreur lors de la récupération des données météorologiques horaires.")


"""
DATES
"""

# Dictionnaire de correspondance des abréviations des jours de la semaine en français
jours_semaine_fr = {
    'Mon': 'Lun',
    'Tue': 'Mar',
    'Wed': 'Mer',
    'Thu': 'Jeu',
    'Fri': 'Ven',
    'Sat': 'Sam',
    'Sun': 'Dim'
}

# Fonction pour formater les dates


def formater_date(date):
    # Convertir la chaîne de date en objet datetime
    date_obj = datetime.strptime(date, '%Y-%m-%d')
    # Obtenir l'abréviation du jour en anglais
    nom_jour_abrege_en = date_obj.strftime('%a')
    # Mapper l'abréviation du jour en français à partir du dictionnaire
    nom_jour_abrege_fr = jours_semaine_fr.get(nom_jour_abrege_en)
    # Formater la date en "jour/mois"
    jour_mois = date_obj.strftime('%d/%m')
    return nom_jour_abrege_fr, jour_mois


# Utiliser la fonction pour formater les dates dans la liste
noms_jours, dates_formatees = zip(*[formater_date(date) for date in jour])


"""
ICÔNES WMO
"""

# Charger le fichier JSON dans un dictionnaire
with open('images.json', 'r') as json_file:
    data = json.load(json_file)

# Créer un dictionnaire de correspondance entre les codes WMO et les noms et URLs du fichier JSON
correspondance_wmo = {str(key): value for key, value in data.items()}

# Récupérer les URLs et les noms à partir des codes WMO
noms_urls = []
for i in wmo:
    info = correspondance_wmo[str(i)]
    noms_urls.append(
        {'nom': info['nom'], 'url': info['url']})


# Trouver les codes WMO de nuit
wmo_n = [0] * jours
for i in range(jours):  # Chaque nuit
    # Utilisation de Counter pour compter les occurrences des codes WMO entre 18h et 6h du matin
    compteur = Counter(wmo_h[24*i + 18: 24*i + 30])
    # Trouver l'élément le plus commun et son nombre d'occurrences
    wmo_n[i] = max(compteur, key=compteur.get)

# Récupérer les URLs partir des codes WMO de nuit
noms_urls_n = []
for i in wmo_n:
    info_n = correspondance_wmo[str(i)]
    noms_urls_n.append(
        {'nom': info_n['nom'], 'urln': info_n['urln']})


"""
TEMPERATURES
"""

# Echelle discrète de couleurs basée sur les températures


def temperature_to_color(temperature):
    if (temperature < 0):
        return 'rgb(100, 180, 210)'
    elif (0 <= temperature < 5):
        return 'rgb(90, 220, 200)'
    elif (5 <= temperature < 10):
        return 'rgb(70, 220, 120)'
    elif (10 <= temperature < 15):
        return 'rgb(80, 230, 40)'
    elif (15 <= temperature < 20):
        return 'rgb(155, 230, 20)'
    elif (20 <= temperature < 25):
        return 'rgb(220, 190, 10)'
    elif (25 <= temperature < 30):
        return 'rgb(210, 110, 10)'
    elif (30 <= temperature < 35):
        return 'rgb(200, 60, 0)'
    else:
        return 'rgb(200, 30, 0)'


"""
VENT
"""

# Calculer la vitesse moyenne du vent chaque jour
vent = [0] * (jours+1)

for i in range(jours+1):  # Chaque jour
    a = 0  # Nombre de données disponibles sur les 24 totales
    for j in range(24):  # Chaque heure d'une journée
        # Si la donnée est disponible, elle est ajoutée et a est incrémenté
        if vent_h[24*i + j] != None:
            vent[i] = vent[i] + vent_h[24*i + j]
            a = a + 1
    vent[i] = vent[i]/a  # Moyenne du vent du jour i selon les valeurs disponibles

# Prendre la valeur entière du vent
vent_ent = [round(temp) for temp in vent]


# Echelle discrète de couleurs basée sur la vitesse du vent


def vent_to_color(vent):
    if (vent < 30):
        return 'rgba(0, 0, 0, 0)'
    elif (30 <= vent < 50):
        return 'rgb(255, 255, 0)'
    elif (50 <= vent < 100):
        return 'rgb(255, 128, 0)'
    elif (100 <= vent < 150):
        return 'rgb(255, 0, 0)'
    else:
        return 'rgb(130, 0, 255)'


# Afficher la direction cardinale du vent si possible


def generate_wind_icon(direction):
    if direction == '-':
        return ''
    else:
        return f'''
            <div style="width: 20px; height: 20px; overflow: hidden; transform: rotate({direction}deg); display: inline-block; margin: 0 auto;">
                <div style="width: 0; height: 0; border-left: 5px solid transparent; 
                            border-right: 5px solid transparent; border-bottom: 15px solid black;">
                </div>
            </div>
        '''


"""
TABLEAU METEO
"""

html_code = f"""
<head>
    <link rel="stylesheet" href="styles.css">
</head>

<table id="myTable">
    <!-- Ligne 1 -->
    <tr title="Date" class="couleur1">
        <th style="background-color: rgb(255, 255, 255); border-top:3px solid rgb(20, 15, 185); border-right:3px solid rgb(20, 15, 185); border-left:3px solid rgb(20, 15, 185)">
            <strong>
                {noms_jours[0]}
            </strong>
            <br>Aujourd'hui
        </th>
        <th>
            <strong>
                {noms_jours[1]}
            </strong>
            <br>Demain
        </th>
        <th>
            <strong>
                {noms_jours[2]}
            </strong>
            <br>{dates_formatees[2]}
        </th>
        <th>
            <strong>
                {noms_jours[3]}
            </strong>
            <br>{dates_formatees[3]}
        </th>
        <th>
            <strong>
                {noms_jours[4]}
            </strong>
            <br>{dates_formatees[4]}
        </th>
    </tr>

    <!-- Ligne 2 -->
    <tr class="couleur2" title="icône WMO">
        <th style="border-right:3px solid rgb(20, 15, 185); border-left:3px solid rgb(20, 15, 185)">
            <img class="day-image" src ="{noms_urls[0]['url']}" title="{noms_urls[0]['nom']}">
            <img class="circular-image" src ="{noms_urls_n[0]['urln']}" title="{noms_urls_n[0]['nom']}">
        </th>
        <th>
            <img class="day-image" src ="{noms_urls[1]['url']}" title="{noms_urls[1]['nom']}">
            <img class="circular-image" src ="{noms_urls_n[1]['urln']}" title="{noms_urls_n[1]['nom']}">
        </th>
        <th>
            <img class="day-image" src ="{noms_urls[2]['url']}" title="{noms_urls[2]['nom']}">
            <img class="circular-image" src ="{noms_urls_n[2]['urln']}" title="{noms_urls_n[2]['nom']}">
        </th>
        <th>
            <img class="day-image" src ="{noms_urls[3]['url']}" title="{noms_urls[3]['nom']}">
            <img class="circular-image" src ="{noms_urls_n[3]['urln']}" title="{noms_urls_n[3]['nom']}">
        </th>
        <th>
            <img src ="{noms_urls[4]['url']}" title="{noms_urls[4]['nom']}" style="width: 60px; height: 60px">
        </th>
    </tr>

    <!-- Ligne 3 -->
    <tr class="couleur1" title="Températures minimale - maximale">
        <th style="background-color: rgb(255, 255, 255); border-right:3px solid rgb(20, 15, 185); border-left:3px solid rgb(20, 15, 185)">
            <div class="mini-case" style="background-color: {temperature_to_color(moyenne[0])};">
                {temperature_min_ent[0]} °C - {temperature_max_ent[0]} °C
            </div>
        </th>
        <th>
            <div class="mini-case" style="background-color: {temperature_to_color(moyenne[1])};">
                {temperature_min_ent[1]} °C - {temperature_max_ent[1]} °C
            </div>
        </th>
        <th>
            <div class="mini-case" style="background-color: {temperature_to_color(moyenne[2])};">
                {temperature_min_ent[2]} °C - {temperature_max_ent[2]} °C
            </div>
        </th>
        <th>
            <div class="mini-case" style="background-color: {temperature_to_color(moyenne[3])};">
                {temperature_min_ent[3]} °C - {temperature_max_ent[3]} °C
            </div>
        </th>
        <th>
            <div class="mini-case" style="background-color: {temperature_to_color(moyenne[4])};">
                {temperature_min_ent[4]} °C - {temperature_max_ent[4]} °C
            </div>
        </th>
    </tr>

    <!-- Ligne 4 -->
    <tr class="couleur1" title="Vitesse moyenne du vent">
        <th style="background-color: rgb(255, 255, 255); border-right:3px solid rgb(20, 15, 185); border-left:3px solid rgb(20, 15, 185)">
            <div class="mini-case" style="background-color: {vent_to_color(vent_ent[0])};">
                {generate_wind_icon(direction_vent[0])} {vent_ent[0]} km/h
            </div>
        </th>
        <th>
            <div class="mini-case" style="background-color: {vent_to_color(vent_ent[1])};">
                {generate_wind_icon(direction_vent[1])} {vent_ent[1]} km/h
            </div>
        </th>
        <th>
            <div class="mini-case" style="background-color: {vent_to_color(vent_ent[2])};">
                {generate_wind_icon(direction_vent[2])} {vent_ent[2]} km/h
            </div>
        </th>
        <th>
            <div class="mini-case" style="background-color: {vent_to_color(vent_ent[3])};">
                {generate_wind_icon(direction_vent[3])} {vent_ent[3]} km/h
            </div>
        </th>
        <th>
            <div class="mini-case" style="background-color: {vent_to_color(vent_ent[4])};">
                {generate_wind_icon(direction_vent[4])} {vent_ent[4]} km/h
            </div>
        </th>
    </tr>
    
    <!-- Ligne 5 -->
    <tr class="couleur1" title="Quantité de précipitations">
        <th style="background-color: rgb(255, 255, 255); border-bottom:3px solid rgb(20, 15, 185); border-right:3px solid rgb(20, 15, 185); border-left:3px solid rgb(20, 15, 185)">
            <img src="images_svg/Water_Drop.svg"> {precipitations[0]} mm
        </th>
        <th>
            <img src="images_svg/Water_Drop.svg"> {precipitations[1]} mm
        </th>
        <th>
            <img src="images_svg/Water_Drop.svg"> {precipitations[2]} mm
        </th>
        <th>
            <img src="images_svg/Water_Drop.svg"> {precipitations[3]} mm
        </th>
        <th>
            <img src="images_svg/Water_Drop.svg"> {precipitations[4]} mm
        </th>
    </tr>
</table>
"""

display(HTML(html_code))
```

Météo de Montpellier pour les 5 prochains jours, aujourd'hui compris, affichant respectivement pour chaque journée (colonne):
<ol>
    <li>la date,</li>
    <li>le pictogramme WMO (World Meteorological Organization) avec la description correspondante,</li>
    <li>les températures minimale et maximale en valeur entière en degrés Celsius dont la couleur du fond change en fonction des valeurs,</li>
    <li>la vitesse moyenne du vent en valeur entière en kilomètres par heure et sa direction cardinale représentée par une flèche (ou rien si la donnée est indisponible), dont la couleur du fond change en fonction de la valeur,</li>
    <li>et enfin la quantité de précipitations en millimètres.</li>
</ol>
De plus, un pictogramme WMO de nuit apparaît entre chaque jour et est déterminé selon le code WMO ayant le plus grand nombre d'occurences entre 18h et 6h. Tous les pictogrammes proviennent du site [meteoblue.com](https://content.meteoblue.com/fr/recherche-education/specifications/standards/symboles-et-pictogrammes) et sont en format svg.

Certaines descriptions sont affichées en survolant les cellules et les images avec un curseur de souris. Il peut arriver que le symbole "-" s'affiche si une ou plusieurs données sont indisponibles.

Toutes les informations proviennent d'une API (Application Programming Interface) choisie proposée par [open-meteo.com](https://open-meteo.com/en/docs/meteofrance-api) et sont mises à jour toutes les trois heures.
