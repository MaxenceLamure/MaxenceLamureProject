---
title: "Météo Montpellier"
subtitle: "Occitanie, France, 43.61°N 3.88°E, 55m s.n.m."
---

```{python}
"""
API
"""
import pandas as pd
import requests

# URL de l'API
url = "https://api.open-meteo.com/v1/meteofrance?latitude=43.6109&longitude=3.8763&daily=weathercode,temperature_2m_max,temperature_2m_min,precipitation_sum,windspeed_10m_max,winddirection_10m_dominant&timezone=Europe%2FBerlin"

# Envoi de la requête GET à l'API
response = requests.get(url)

# Vérification du statut de la requête
if response.status_code == 200:
    # Conversion des données JSON en un dictionnaire Python
    data = response.json()
    # Accéder aux données météo à partir de la réponse JSON
    jour = data["daily"]["time"]
    wmo = data["daily"]["weathercode"]
    temperature_max = data["daily"]["temperature_2m_max"]
    temperature_min = data["daily"]["temperature_2m_min"]
    vent = data["daily"]["windspeed_10m_max"]
    direction_vent = data["daily"]["winddirection_10m_dominant"]
    precipitations = data["daily"]["precipitation_sum"]

    # Valeurs arrondies à l'unité et remplacer les valeurs manquantes par "-"
    temperature_max_maj = [round(temp) if not pd.isna(temp) else "-" for temp in temperature_max]
    temperature_min_min = [round(temp) if not pd.isna(temp) else "-" for temp in temperature_min]
    vent_arr = [round(temp) if not pd.isna(temp) else "-" for temp in vent]
    # Remplacer les valeurs manquantes par "-" pour les autres variables
    jour = [date if not pd.isna(date) else "-" for date in jour]
    wmo = [code if not pd.isna(code) else "-" for code in wmo]
    direction_vent = [direction if not pd.isna(direction) else "-" for direction in direction_vent]
    precipitations = [precipitation if not pd.isna(precipitation) else "-" for precipitation in precipitations]
    # Moyenne des températures
    moyenne = []
    for i in range(4):
        moyenne.append((temperature_max_maj[i]+temperature_min_min[i])/2)
else:
    # Affichage d'un message d'erreur si la requête échoue
    print("Erreur lors de la récupération des données météorologiques.")
```


```{python}
"""
Dates
"""
from datetime import datetime
import locale

# Définir la locale en français
locale.setlocale(locale.LC_TIME, 'fr_FR.UTF-8')

# Fonction pour formater les dates
def formater_date(date):
    # Convertir la chaîne de date en objet datetime
    date_obj = datetime.strptime(date, '%Y-%m-%d')
    # Formater l'abréviation du jour en minuscules et sans point à la fin
    nom_jour_abrege = date_obj.strftime('%a').lower().rstrip('.')
    # Mettre en majuscule la première lettre de l'abréviation du jour
    nom_jour_abrege = nom_jour_abrege.capitalize()
    # Formater la date en "jour/mois"
    jour_mois = date_obj.strftime('%d/%m')
    return nom_jour_abrege, jour_mois

# Utiliser la fonction pour formater les dates dans la liste
noms_jours, dates_formatees = zip(*[formater_date(date) for date in jour])


"""
Icônes WMO
"""
import json

# Charger le fichier JSON dans un dictionnaire
with open('images.json', 'r') as json_file:
    data = json.load(json_file)

# Créer un dictionnaire de correspondance entre les numéros WMO et les noms et URL du fichier JSON
correspondance_wmo = {str(key): value for key, value in data.items()}

# Récupérer les URLs et les noms à partir des numéros WMO
noms_urls = []
for numero in wmo:
    if str(numero) in correspondance_wmo:
        info = correspondance_wmo[str(numero)]
        nom = info['nom']
        url = info['url']
        urln = info['urln']
        noms_urls.append({'nom': nom, 'url': url, 'urln': urln})
    else:
        noms_urls.append({'nom': '', 'url': '', 'urln': ''})  # Valeurs par défaut si le numéro WMO n'est pas trouvé


"""
Couleurs températures
"""
import matplotlib.colors as mcolors
import matplotlib.pyplot as plt
import numpy as np

# Définir les températures minimale et maximale
min_temp = -15
max_temp = 70

# Créer une échelle de couleurs basée sur les températures
cmap = plt.cm.YlOrBr
norm = mcolors.Normalize(vmin=min_temp, vmax=max_temp)
scalarmap = plt.cm.ScalarMappable(cmap=cmap, norm=norm)
scalarmap.set_array([])  # Permet de normaliser les valeurs

# Fonction pour convertir la température en couleur hexadécimale
def temperature_to_color(temperature):
    color = scalarmap.to_rgba(temperature)
    return mcolors.to_hex(color, keep_alpha=False)
```


```{python}
"""
Tableau
"""
from IPython.display import display, HTML

html_code = f"""
<head>
    <link rel="stylesheet" href="styles.css">
</head>

<table id="myTable" title="Date">
    <!-- Ligne 1 -->
    <tr class="couleur1">
        <th style="background-color: white;" class="bordure2 bordure top">
            <strong>
                {noms_jours[0]}
            </strong>
            <br>Aujourd'hui
        </th>
        <th>
            <strong>
                {noms_jours[1]}
            </strong>
            <br>Demain
        </th>
        <th>
            <strong>
                {noms_jours[2]}
            </strong>
            <br>{dates_formatees[2]}
        </th>
        <th>
            <strong>
                {noms_jours[3]}
            </strong>
            <br>{dates_formatees[3]}
        </th>
    </tr>

    <!-- Ligne 2 -->
    <tr class="couleur2" title="Temps">
        <th title="{noms_urls[0]['nom']}" class="bordure2 bordure">
            <img class="day-image" src ="{noms_urls[0]['url']}">
            <img class="circular-image" src ="{noms_urls[0]['urln']}">
            <br>{noms_urls[0]['nom']}
        </th>
        <th title="{noms_urls[1]['nom']}">
            <img class="day-image" src ="{noms_urls[1]['url']}">
            <img class="circular-image" src ="{noms_urls[1]['urln']}">
            <br>{noms_urls[1]['nom']}
        </th>
        <th title="{noms_urls[2]['nom']}">
            <img class="day-image" src ="{noms_urls[2]['url']}">
            <img class="circular-image" src ="{noms_urls[2]['urln']}">
            <br>{noms_urls[2]['nom']}
        </th>
        <th title="{noms_urls[3]['nom']}">
            <img src ="{noms_urls[3]['url']}">
            <br>{noms_urls[3]['nom']}
        </th>
    </tr>

    <!-- Ligne 3 -->
    <tr class="couleur1" title="Températures minimale - maximale">
        <th style="background-color: white;" class="bordure2 bordure">
            <div class="mini-case" style="background-color: {temperature_to_color(moyenne[0])};">
                {temperature_min_min[0]} °C - {temperature_max_maj[0]} °C
            </div>
        </th>
        <th>
            <div class="mini-case" style="background-color: {temperature_to_color(moyenne[1])};">
                {temperature_min_min[1]} °C - {temperature_max_maj[1]} °C
            </div>
        </th>
        <th>
            <div class="mini-case" style="background-color: {temperature_to_color(moyenne[2])};">
                {temperature_min_min[2]} °C - {temperature_max_maj[2]} °C
            </div>
        </th>
        <th>
            <div class="mini-case" style="background-color: {temperature_to_color(moyenne[3])};">
                {temperature_min_min[3]} °C - {temperature_max_maj[3]} °C
            </div>
        </th>
    </tr>

    <!-- Ligne 4 -->
    <tr class="couleur1" title="Vitesse du vent maximale">
        <th style="background-color: white;" class="bordure2 bordure">
            <div style="width: 20px; height: 20px; overflow: hidden; transform: rotate({direction_vent[0]}deg); display: inline-block; margin: 0 auto;">
                <div style="width: 0; height: 0; border-left: 5px solid transparent; border-right: 5px solid transparent; border-bottom: 15px solid black;">
                </div>
            </div>
            {vent_arr[0]} km/h
        </th>
        <th>
            <div style="width: 20px; height: 20px; overflow: hidden; transform: rotate({direction_vent[1]}deg); display: inline-block; margin: 0 auto;">
                <div style="width: 0; height: 0; border-left: 5px solid transparent; border-right: 5px solid transparent; border-bottom: 15px solid black;">
                </div>
            </div>
            {vent_arr[1]} km/h
        </th>
        <th>
            <div style="width: 20px; height: 20px; overflow: hidden; transform: rotate({direction_vent[2]}deg); display: inline-block; margin: 0 auto;">
                <div style="width: 0; height: 0; border-left: 5px solid transparent; border-right: 5px solid transparent; border-bottom: 15px solid black;">
                </div>
            </div>
            {vent_arr[2]} km/h
        </th>
        <th>
            <div style="width: 20px; height: 20px; overflow: hidden; transform: rotate({direction_vent[3]}deg); display: inline-block; margin: 0 auto;">
                <div style="width: 0; height: 0; border-left: 5px solid transparent; border-right: 5px solid transparent; border-bottom: 15px solid black;">
                </div>
            </div>
            {vent_arr[3]} km/h
        </th>
    </tr>
    
    <!-- Ligne 5 -->
    <tr class="couleur1" title="Quantité de précipitations">
        <th style="background-color: white;" class="bordure2 bordure bottom">
            <img src ="images_svg/Water_Drop.svg"> 
                {precipitations[0]} mm
        </th>
        <th>
            <img src ="images_svg/Water_Drop.svg"> 
                {precipitations[1]} mm
        </th>
        <th>
            <img src ="images_svg/Water_Drop.svg"> 
                {precipitations[2]} mm
        </th>
        <th>
            <img src ="images_svg/Water_Drop.svg"> 
                {precipitations[3]} mm
        </th>
    </tr>
</table>
"""

display(HTML(html_code))
```

Météo de Montpellier pour les 4 prochains jours, aujourd'hui compris, affichant respectivement pour chaque journée (colonne):
<ol>
    <li>la date,</li>
    <li>le pictogramme WMO (World Meteorological Organization) provenant du site meteoblue.com en format svg avec la description correspondante,</li>
    <li>les températures minimale et maximale en valeurs entières en degrés Celsius,</li>
    <li>la vitesse du vent maximale en valeur entière en kilomètres par heure (seule donnée disponible) et sa direction cardinale représentée par une flèche,</li>
    <li>la quantité de précipitations en milimètres.</li>
</ol>
De plus, un pictogramme WMO de nuit apparaît entre chaque jour et affiche le temps de la journée précédente.

Ces descriptions sont affichées en survolant les cellules avec le curseur.

Les informations proviennent d'une API (Application Programming Interface) choisie proposée par open-meteo.com et sont mises à jour quotidiennement à 00h00 UTC+01:00.
