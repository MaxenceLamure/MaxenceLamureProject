---
title: "Météo Montpellier"
subtitle: "Occitanie, France, 43.61°N 3.88°E, 55m s.n.m."
---

```{python}
"""
API
"""
from IPython.display import display, HTML
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors
import json
from datetime import datetime
import pandas as pd
import requests

# URL de l'API
url = "https://api.open-meteo.com/v1/meteofrance?latitude=43.6109&longitude=3.8763&daily=weathercode,temperature_2m_max,temperature_2m_min,precipitation_sum,windspeed_10m_max,winddirection_10m_dominant&timezone=Europe%2FBerlin"

# Envoi de la requête GET à l'API
response = requests.get(url)

# Vérification du statut de la requête
if response.status_code == 200:
    # Conversion des données JSON en un dictionnaire Python
    data = response.json()

    # Accéder aux données météo à partir de la réponse JSON
    jour = data["daily"]["time"]
    wmo = data["daily"]["weathercode"]
    temperature_max = data["daily"]["temperature_2m_max"]
    temperature_min = data["daily"]["temperature_2m_min"]
    vent = data["daily"]["windspeed_10m_max"]
    direction_vent = data["daily"]["winddirection_10m_dominant"]
    precipitations = data["daily"]["precipitation_sum"]

    # Valeurs arrondies à l'unité et remplacer les valeurs manquantes par "-"
    temperature_max_maj = [round(temp) if not pd.isna(
        temp) else "-" for temp in temperature_max]
    temperature_min_min = [round(temp) if not pd.isna(
        temp) else "-" for temp in temperature_min]
    vent_arr = [round(temp) if not pd.isna(temp) else "-" for temp in vent]

    # Remplacer les valeurs manquantes par "-" pour les autres variables
    jour = [date if not pd.isna(date) else "-" for date in jour]
    wmo = [code if not pd.isna(code) else "-" for code in wmo]
    direction_vent = [direction if not pd.isna(
        direction) else "-" for direction in direction_vent]
    precipitations = [precipitation if not pd.isna(
        precipitation) else "-" for precipitation in precipitations]

    # Moyenne des températures
    moyenne = []
    for i in range(4):
        moyenne.append((temperature_max_maj[i]+temperature_min_min[i])/2)
else:
    # Affichage d'un message d'erreur si la requête échoue
    print("Erreur lors de la récupération des données météorologiques.")


"""
Dates
"""

# Dictionnaire de correspondance des abréviations des jours de la semaine en français
jours_semaine_fr = {
    'Mon': 'Lun',
    'Tue': 'Mar',
    'Wed': 'Mer',
    'Thu': 'Jeu',
    'Fri': 'Ven',
    'Sat': 'Sam',
    'Sun': 'Dim'
}

# Fonction pour formater les dates


def formater_date(date):
    # Convertir la chaîne de date en objet datetime
    date_obj = datetime.strptime(date, '%Y-%m-%d')
    # Obtenir l'abréviation du jour en anglais
    nom_jour_abrege_en = date_obj.strftime('%a')
    # Mapper l'abréviation du jour en français à partir du dictionnaire
    nom_jour_abrege_fr = jours_semaine_fr.get(nom_jour_abrege_en)
    # Formater la date en "jour/mois"
    jour_mois = date_obj.strftime('%d/%m')
    return nom_jour_abrege_fr, jour_mois


# Utiliser la fonction pour formater les dates dans la liste
noms_jours, dates_formatees = zip(*[formater_date(date) for date in jour])


"""
Icônes WMO
"""

# Charger le fichier JSON dans un dictionnaire
with open('images.json', 'r') as json_file:
    data = json.load(json_file)

# Créer un dictionnaire de correspondance entre les numéros WMO et les noms et URL du fichier JSON
correspondance_wmo = {str(key): value for key, value in data.items()}

# Récupérer les URLs et les noms à partir des numéros WMO
noms_urls = []
for numero in wmo:
    if str(numero) in correspondance_wmo:
        info = correspondance_wmo[str(numero)]
        noms_urls.append(
            {'nom': info['nom'], 'url': info['url'], 'urln': info['urln']})
    else:
        # Valeurs par défaut si le numéro WMO n'est pas trouvé
        noms_urls.append({'nom': '', 'url': '', 'urln': ''})


"""
Températures
"""

# Echelle discrète de couleurs basée sur les températures


def temperature_to_color(temperature):
    if (temperature < 0):
        return 'rgb(100, 180, 210)'
    elif (0 <= temperature < 5):
        return 'rgb(90, 220, 200)'
    elif (5 <= temperature < 10):
        return 'rgb(70, 220, 120)'
    elif (10 <= temperature < 15):
        return 'rgb(80, 230, 40)'
    elif (15 <= temperature < 20):
        return 'rgb(155, 230, 20)'
    elif (20 <= temperature < 25):
        return 'rgb(220, 190, 10)'
    elif (25 <= temperature < 30):
        return 'rgb(210, 110, 10)'
    elif (30 <= temperature < 35):
        return 'rgb(200, 60, 0)'
    else:
        return 'rgb(200, 30, 0)'


"""
Vent
"""

# Echelle discrète de couleurs basée sur la vitesse du vent


def vent_to_color(vent):
    if (vent < 30):
        return 'rgba(0, 0, 0, 0)'
    elif (30 <= vent < 50):
        return 'rgb(255, 255, 0)'
    elif (50 <= temperature < 100):
        return 'rgb(255, 128, 0)'
    elif (100 <= temperature < 150):
        return 'rgb(255, 0, 0)'
    else:
        return 'rgb(130, 0, 255)'


"""
Précipitations
"""

# Afficher ou non une image de goutte de pluie et la quantité de précipitations


def eau(i, precipitations):
    if precipitations[i] != 0.0:
        return f'<img src="images_svg/Water_Drop.svg"> {precipitations[i]} mm'
    else:
        return '-'


"""
Tableau
"""

html_code = f"""
<head>
    <link rel="stylesheet" href="styles.css">
</head>

<table id="myTable" title="Date">
    <!-- Ligne 1 -->
    <tr class="couleur1">
        <th style="background-color: rgb(255, 255, 255); border-top:3px solid rgb(20, 15, 185); border-right:3px solid rgb(20, 15, 185); border-left:3px solid rgb(20, 15, 185)" class="bordure2 bordure top">
            <strong>
                {noms_jours[0]}
            </strong>
            <br>Aujourd'hui
        </th>
        <th>
            <strong>
                {noms_jours[1]}
            </strong>
            <br>Demain
        </th>
        <th>
            <strong>
                {noms_jours[2]}
            </strong>
            <br>{dates_formatees[2]}
        </th>
        <th>
            <strong>
                {noms_jours[3]}
            </strong>
            <br>{dates_formatees[3]}
        </th>
    </tr>

    <!-- Ligne 2 -->
    <tr class="couleur2">
        <th title="{noms_urls[0]['nom']}" style="border-right:3px solid rgb(20, 15, 185); border-left:3px solid rgb(20, 15, 185)">
            <img class="day-image" src ="{noms_urls[0]['url']}">
            <img class="circular-image" src ="{noms_urls[0]['urln']}">
            <br>{noms_urls[0]['nom']}
        </th>
        <th title="{noms_urls[1]['nom']}">
            <img class="day-image" src ="{noms_urls[1]['url']}">
            <img class="circular-image" src ="{noms_urls[1]['urln']}">
            <br>{noms_urls[1]['nom']}
        </th>
        <th title="{noms_urls[2]['nom']}">
            <img class="day-image" src ="{noms_urls[2]['url']}">
            <img class="circular-image" src ="{noms_urls[2]['urln']}">
            <br>{noms_urls[2]['nom']}
        </th>
        <th title="{noms_urls[3]['nom']}">
            <img src ="{noms_urls[3]['url']}">
            <br>{noms_urls[3]['nom']}
        </th>
    </tr>

    <!-- Ligne 3 -->
    <tr class="couleur1" title="Températures minimale - maximale">
        <th style="background-color: rgb(255, 255, 255); border-right:3px solid rgb(20, 15, 185); border-left:3px solid rgb(20, 15, 185)" class="bordure2 bordure">
            <div class="mini-case" style="background-color: {temperature_to_color(moyenne[0])};">
                {temperature_min_min[0]} °C - {temperature_max_maj[0]} °C
            </div>
        </th>
        <th>
            <div class="mini-case" style="background-color: {temperature_to_color(moyenne[1])};">
                {temperature_min_min[1]} °C - {temperature_max_maj[1]} °C
            </div>
        </th>
        <th>
            <div class="mini-case" style="background-color: {temperature_to_color(moyenne[2])};">
                {temperature_min_min[2]} °C - {temperature_max_maj[2]} °C
            </div>
        </th>
        <th>
            <div class="mini-case" style="background-color: {temperature_to_color(moyenne[3])};">
                {temperature_min_min[3]} °C - {temperature_max_maj[3]} °C
            </div>
        </th>
    </tr>

    <!-- Ligne 4 -->
    <tr class="couleur1" title="Vitesse du vent maximale">
        <th style="background-color: rgb(255, 255, 255); border-right:3px solid rgb(20, 15, 185); border-left:3px solid rgb(20, 15, 185)" class="bordure2 bordure">
            <div class="mini-case" style="background-color: {vent_to_color(vent[0])};">
                <div style="width: 20px; height: 20px; overflow: hidden; transform: rotate({direction_vent[0]}deg); display: inline-block; margin: 0 auto;">
                    <div style="width: 0; height: 0; border-left: 5px solid transparent; border-right: 5px solid transparent; border-bottom: 15px solid black;">
                    </div>
                </div>
            {vent_arr[0]} km/h
            </div>
        </th>
        <th>
            <div class="mini-case" style="background-color: {vent_to_color(vent[1])};">
                <div style="width: 20px; height: 20px; overflow: hidden; transform: rotate({direction_vent[1]}deg); display: inline-block; margin: 0 auto;">
                    <div style="width: 0; height: 0; border-left: 5px solid transparent; border-right: 5px solid transparent; border-bottom: 15px solid black;">
                    </div>
                </div>
            {vent_arr[1]} km/h
            </div>
        </th>
        <th>
            <div class="mini-case" style="background-color: {vent_to_color(vent[2])};">
                <div style="width: 20px; height: 20px; overflow: hidden; transform: rotate({direction_vent[2]}deg); display: inline-block; margin: 0 auto;">
                    <div style="width: 0; height: 0; border-left: 5px solid transparent; border-right: 5px solid transparent; border-bottom: 15px solid black;">
                    </div>
                </div>
            {vent_arr[2]} km/h
            </div>
        </th>
        <th>
            <div class="mini-case" style="background-color: {vent_to_color(vent[2])};">
                <div style="width: 20px; height: 20px; overflow: hidden; transform: rotate({direction_vent[3]}deg); display: inline-block; margin: 0 auto;">
                    <div style="width: 0; height: 0; border-left: 5px solid transparent; border-right: 5px solid transparent; border-bottom: 15px solid black;">
                    </div>
                </div>
            {vent_arr[3]} km/h
            </div>
        </th>
    </tr>
    
    <!-- Ligne 5 -->
    <tr class="couleur1" title="Quantité de précipitations">
        <th style="background-color: rgb(255, 255, 255); border-bottom:3px solid rgb(20, 15, 185); border-right:3px solid rgb(20, 15, 185); border-left:3px solid rgb(20, 15, 185)" class="bordure2 bordure bottom">
            {eau(0, precipitations)}
        </th>
        <th>
            {eau(1, precipitations)}
        </th>
        <th>
            {eau(2, precipitations)}
        </th>
        <th>
            {eau(3, precipitations)}
        </th>
    </tr>
</table>
"""

display(HTML(html_code))
```

Météo de Montpellier pour les 4 prochains jours, aujourd'hui compris, affichant respectivement pour chaque journée (colonne):
<ol>
    <li>la date,</li>
    <li>le pictogramme WMO (World Meteorological Organization) avec la description correspondante,</li>
    <li>les températures minimale et maximale en valeur entière en degrés Celsius dont la couleur du fond change en fonction des valeurs,</li>
    <li>la vitesse du vent maximale (seule donnée disponible) en valeur entière en kilomètres par heure et sa direction cardinale représentée par une flèche, dont la couleur du fond change en fonction de la valeur,</li>
    <li>et enfin la quantité de précipitations en millimètres (affiche "-" si elle est nulle).</li>
</ol>
De plus, un pictogramme WMO de nuit apparaît entre chaque jour et affiche le temps de la journée précédente (par manque de données). Tous les pictogrammes proviennent du site [meteoblue.com](https://content.meteoblue.com/fr/recherche-education/specifications/standards/symboles-et-pictogrammes) et sont en format svg.

Ces descriptions sont affichées en survolant les cellules avec le curseur.

Les informations proviennent d'une API (Application Programming Interface) choisie proposée par [open-meteo.com](https://open-meteo.com/en/docs/meteofrance-api) et sont mises à jour toutes les trois heures.
