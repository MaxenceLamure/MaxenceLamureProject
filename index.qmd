---
title: "Prévisions Météo"
---

```{python}
"""
API
"""
import pandas as pd
import requests

# URL de l'API
url = "https://api.open-meteo.com/v1/meteofrance?latitude=43.6109&longitude=3.8763&daily=weathercode,temperature_2m_max,temperature_2m_min,precipitation_sum,windspeed_10m_max,winddirection_10m_dominant&timezone=Europe%2FBerlin"

# Envoi de la requête GET à l'API
response = requests.get(url)

# Vérification du statut de la requête
if response.status_code == 200:
    # Conversion des données JSON en un dictionnaire Python
    data = response.json()
    # Accéder aux données météo à partir de la réponse JSON
    jour = data["daily"]["time"]
    wmo = data["daily"]["weathercode"]
    temperature_max = data["daily"]["temperature_2m_max"]
    temperature_min = data["daily"]["temperature_2m_min"]
    vent = data["daily"]["windspeed_10m_max"]
    direction_vent = data["daily"]["winddirection_10m_dominant"]
    precipitations = data["daily"]["precipitation_sum"]
    # Valeurs arrondies à l'unité
    temperature_max_maj = [round(temp) for temp in temperature_max]
    temperature_min_min = [round(temp) for temp in temperature_min]
    vent_arr = [round(temp) for temp in vent]
else:
    # Affichage d'un message d'erreur si la requête échoue
    print("Erreur lors de la récupération des données météorologiques.")
```

```{python}
"""
Dates
"""
from datetime import datetime
import locale

# Définir la locale en français
locale.setlocale(locale.LC_TIME, 'fr_FR.UTF-8')

# Liste de dates
dates = ['2023-11-01', '2023-11-02', '2023-11-03', '2023-11-04']

# Fonction pour formater les dates
def formater_date(date):
    # Convertir la chaîne de date en objet datetime
    date_obj = datetime.strptime(date, '%Y-%m-%d')
    # Formater l'abréviation du jour en minuscules et sans point à la fin
    nom_jour_abrege = date_obj.strftime('%a').lower().rstrip('.')
    # Mettre en majuscule la première lettre de l'abréviation du jour
    nom_jour_abrege = nom_jour_abrege.capitalize()
    # Formater la date en "jour/mois"
    jour_mois = date_obj.strftime('%d/%m')
    return nom_jour_abrege, jour_mois

# Utiliser la fonction pour formater les dates dans la liste
noms_jours, dates_formatees = zip(*[formater_date(date) for date in dates])
```

```{python}
"""
Icônes WMO
"""
import json

# Charger le fichier JSON dans un dictionnaire
with open('images.json', 'r') as json_file:
    data = json.load(json_file)

# La variable wmo contient les numéros WMO
wmo = [3, 51, 3, 51]

# Créer un dictionnaire de correspondance entre les numéros WMO et les noms et URL du fichier JSON
correspondance_wmo = {str(key): value for key, value in data.items()}

# Récupérer les URLs et les noms à partir des numéros WMO
noms_urls = []
for numero in wmo:
    if str(numero) in correspondance_wmo:
        info = correspondance_wmo[str(numero)]
        nom = info['nom']
        url = info['url']
        noms_urls.append({'nom': nom, 'url': url})
    else:
        noms_urls.append({'nom': '', 'url': ''})  # Valeurs par défaut si le numéro WMO n'est pas trouvé

```

```{python}
"""
Couleurs températures
"""
import matplotlib.colors as mcolors
import matplotlib.pyplot as plt
import numpy as np

# Définir les températures minimale et maximale
min_temp = -15
max_temp = 70

# Créer une échelle de couleurs basée sur les températures
cmap = plt.cm.YlOrBr
norm = mcolors.Normalize(vmin=min_temp, vmax=max_temp)
scalarmap = plt.cm.ScalarMappable(cmap=cmap, norm=norm)
scalarmap.set_array([])  # Permet de normaliser les valeurs

# Fonction pour convertir la température en couleur hexadécimale
def temperature_to_color(temperature):
    color = scalarmap.to_rgba(temperature)
    return mcolors.to_hex(color, keep_alpha=False)
```

```{python}
"""
Tableau
"""
from IPython.display import display, HTML

html_code = f"""
<head>
    <link rel="stylesheet" href="styles.css">
</head>

<table id="myTable">
    <tr class="couleur1">
        <th title="Date" class="bordure2 bordure top"><strong>{noms_jours[0]}</strong><br>Aujourd'hui</th>
        <th title="Date"><strong>{noms_jours[1]}</strong><br>Demain</th>
        <th title="Date"><strong>{noms_jours[2]}</strong><br>{dates_formatees[2]}</th>
        <th title="Date"><strong>{noms_jours[3]}</strong><br>{dates_formatees[3]}</th>
    </tr>

    <tr class="couleur2">
        <th title="Icône WMO" class="bordure2 bordure"><img src ="{noms_urls[0]['url']}"></a><br>
        {noms_urls[0]['nom']}</th>
        <th title="Icône WMO"><img src ="{noms_urls[1]['url']}"></a><br>
        {noms_urls[1]['nom']}</th>
        <th title="Icône WMO"><img src ="{noms_urls[2]['url']}"></a><br>
        {noms_urls[2]['nom']}</th>
        <th title="Icône WMO"><img src ="{noms_urls[3]['url']}"></a><br>
        {noms_urls[3]['nom']}</th>
    </tr>

    <tr class="couleur1">
        <th title="Température maximale" class="bordure2 bordure"><div class="mini-case" style="background-color: {temperature_to_color(temperature_max_maj[0])};">{temperature_max_maj[0]} °C</div></th>
        <th title="Température maximale"><div class="mini-case" style="background-color: {temperature_to_color(temperature_max_maj[1])};">{temperature_max_maj[1]} °C</div></th>
        <th title="Température maximale"><div class="mini-case" style="background-color: {temperature_to_color(temperature_max_maj[2])};">{temperature_max_maj[2]} °C</div></th>
        <th title="Température maximale"><div class="mini-case" style="background-color: {temperature_to_color(temperature_max_maj[3])};">{temperature_max_maj[3]} °C</div></th>
    </tr>

    <tr class="couleur1">
        <th title="Température minimale" class="bordure2 bordure"><div class="mini-case" style="background-color: {temperature_to_color(temperature_min_min[0])};">{temperature_min_min[0]} °C</div></th>
        <th title="Température minimale"><div class="mini-case" style="background-color: {temperature_to_color(temperature_min_min[1])};">{temperature_min_min[1]} °C</div></th>
        <th title="Température minimale"><div class="mini-case" style="background-color: {temperature_to_color(temperature_min_min[2])};">{temperature_min_min[2]} °C</div></th>
        <th title="Température minimale"><div class="mini-case" style="background-color: {temperature_to_color(temperature_min_min[3])};">{temperature_min_min[3]} °C</div></th>
    </tr>

    <tr class="couleur1">
        <th title="Vitesse du vent maximale" class="bordure2 bordure">{vent_arr[0]} km/h</th>
        <th title="Vitesse du vent maximale">{vent_arr[1]} km/h</th>
        <th title="Vitesse du vent maximale">{vent_arr[2]} km/h</th>
        <th title="Vitesse du vent maximale">{vent_arr[3]} km/h</th>
    </tr>
    
    <tr class="couleur1">
        <th title="Quantité de précipitations" class="bordure2 bordure bottom">{precipitations[0]} mm</th>
        <th title="Quantité de précipitations">{precipitations[1]} mm</th>
        <th title="Quantité de précipitations">{precipitations[2]} mm</th>
        <th title="Quantité de précipitations">{precipitations[3]} mm</th>
    </tr>
</table>
"""

display(HTML(html_code))
```


